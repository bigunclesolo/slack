version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: slack-github-postgres
    environment:
      POSTGRES_DB: slack_github_automation
      POSTGRES_USER: slack_user
      POSTGRES_PASSWORD: slack_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U slack_user -d slack_github_automation"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache and Message Queue
  redis:
    image: redis:7-alpine
    container_name: slack-github-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Slack Bot Service
  slack-bot:
    build:
      context: .
      dockerfile: slack-bot/Dockerfile
    container_name: slack-github-bot
    environment:
      - DATABASE_URL=postgresql://slack_user:slack_password@postgres:5432/slack_github_automation
      - REDIS_URL=redis://redis:6379/0
    env_file:
      - .env
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./slack-bot:/app/slack-bot
      - ./shared:/app/shared
    restart: unless-stopped

  # NLP Engine Service
  nlp-engine:
    build:
      context: .
      dockerfile: nlp-engine/Dockerfile
    container_name: slack-github-nlp
    environment:
      - DATABASE_URL=postgresql://slack_user:slack_password@postgres:5432/slack_github_automation
      - REDIS_URL=redis://redis:6379/0
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./nlp-engine:/app/nlp-engine
      - ./shared:/app/shared
      - nlp_models:/app/models
    restart: unless-stopped

  # GitHub Engine Service
  github-engine:
    build:
      context: .
      dockerfile: github-engine/Dockerfile
    container_name: slack-github-engine
    environment:
      - DATABASE_URL=postgresql://slack_user:slack_password@postgres:5432/slack_github_automation
      - REDIS_URL=redis://redis:6379/0
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./github-engine:/app/github-engine
      - ./shared:/app/shared
      - github_repos:/app/repos
    restart: unless-stopped

  # Workflow Orchestrator Service
  orchestrator:
    build:
      context: .
      dockerfile: orchestrator/Dockerfile
    container_name: slack-github-orchestrator
    environment:
      - DATABASE_URL=postgresql://slack_user:slack_password@postgres:5432/slack_github_automation
      - REDIS_URL=redis://redis:6379/0
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./orchestrator:/app/orchestrator
      - ./shared:/app/shared
    restart: unless-stopped

  # API Gateway (Optional)
  api-gateway:
    build:
      context: .
      dockerfile: api/Dockerfile
    container_name: slack-github-api
    environment:
      - DATABASE_URL=postgresql://slack_user:slack_password@postgres:5432/slack_github_automation
      - REDIS_URL=redis://redis:6379/0
    env_file:
      - .env
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./api:/app/api
      - ./shared:/app/shared
    restart: unless-stopped

  # Monitoring (Prometheus)
  prometheus:
    image: prom/prometheus:latest
    container_name: slack-github-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  # Monitoring (Grafana)
  grafana:
    image: grafana/grafana:latest
    container_name: slack-github-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana:/etc/grafana/provisioning
    depends_on:
      - prometheus

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nlp_models:
    driver: local
  github_repos:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  default:
    name: slack-github-network
